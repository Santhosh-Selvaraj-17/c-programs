Stacks :
In short 'Stack' is a linear data structure which follows Last in, First out principle. Linear data structures are a type of data structures where the arrangemnet of the data follows a linear trend. We call it Last in, First out (LIFO) because this data structure is designed in a way such that the element that is added last to the linear structure is (should be) removed first, when the removal process is initiated by the user. The name "stack" for this type of linear structure comes fromm the analogy to a set of physical items stacked on top of each other.For example, a stack of books. The books at the bottom of the stack are not accessible unless we remove the books on top, resembling LIFO principle. Stacks have two main principal operations. 
1) Push - This operation adds an element to the top of the stack, i.e, this operation adds an element to the collection.
2) Pop - This operation removes the most recently added element that was not yet removed,i.e, this operation removes the element at the top of the stack.
There is one additional operation called peek. Peek operation gives acess to the top without modyfying the stack, i.e, it returns the value of the top element(most recently added) without modifying the structure.
Generally this data structure can be implemented in two ways,using arrays and using Linked lists, as both are linear data structures. This is done by incorporating the push,pop and peek operations into these structures.
 A stack is called empty when there are no elements in the linear structure, except the dummy element that we set at the bottom. It's generally -1. A stack is called full or overflowing when it has reached its's maximum capacity (only for arrays).Two functions can be defined by the user to check the emptiness and the fullness of the stack. Time complexity of push operation, pop operation are all O(1). Some applications of stacks are backtracking, compile time memory management and making the algorithms efficient.
Queues :
A queue is another type of linear data structure. A queue is linear (sequential) collection of entities that can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence. The end where entities are added is called the rear, and the other end is called the front.The name queue is inspired from the queue system that are followed by the people at various public places. It works on the First in, First out principle. The first element that will be added to the list will be the first one that will get evicted/accessed from the structure. There are again two main operations associated with this structure. 
1) Enqueue - Adding element to the rear end.
2) Dequeue - Removing element from the front end.
Peek operation is also used here, which returns the value of the next element to be dequeued without actually dequeuing it. Queues can be implemented by arrays and linked lists as well. Since arrays have a fixed capacity, there is always possibility of an overflow and hence it's not generally desired. A doubly linked list is very much preferred because enqueuing and dequeuing is facilitated in that. In case of a singly linked list, the enqueuing part is very obvious. But for dequeuing , we should keep a pointer to the last node . The time complexity of enqueuing and dequeuing for a well-constructed queue is O(1).Applications of Queues include Mail queuing and queues in routers/switches in networks. Another application is spooling in printers and buffer for devices like keyboard. 

Hash tables :
Hash table is a data structure composed of an associative array and a hash function. The data is stored in the array and the hash function facilitates the accessing/searching of the data stored in the array. The data stored is of the form of a key-value pair. A key is a an input that the user gives. Values are the data associated with the key, that are stored in the array. These values are the outputs that the user desires to get. A hash function/hash map is a map from keys to values, used to compute values from keys. But the hash functions don't directly compute the values from the keys. The hash functions are constructed in a way such that they compute an index(array index) from the key. Using the index, the particular cell of the array where the values are stored, is accessed. Thus it becomes a data structure in which insetrion and search operations are very fast irrespective of the size of the data. 
Ideally the hash function will assign each key to a unique array cell, but most hash functions are imperfect, causing collisions called hash collisions where same index is generated for more than one key. To accomodate this, there are many ways. One such way is chaining, for which the explanation follows. When the values of two different keys are stored in the same index, they can be linked using a linked list. In such cases also, the hash functions compute the index from the keys. We know that each index is associated with a linked list. After accessing the linked list with the index, we can traverse through it to find the value associated with the key.
Worst case time complexity for searching in such a hash table O(n). For inserting a data and deleting data also, it takes time complexity of O(n). Applications of Hash tables include, Caches, Database indexing, object representing and unique data representation. 